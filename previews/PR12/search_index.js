var documenterSearchIndex = {"docs":
[{"location":"solvers/solver_overview/#Solver-overview","page":"Solver overview","title":"Solver overview","text":"","category":"section"},{"location":"solvers/solver_overview/","page":"Solver overview","title":"Solver overview","text":"All solvers follow a similar pattern. Given a state::StateVariables, the solver tries to advance the  state to the next timestep/loadstep. The step size is determined by the solver itself based on its input parameters. If the current step diverges, most solvers tries to modify (e.g. decrease) the step size in order to hopefully achieve convergence more easily.","category":"page"},{"location":"solvers/solver_overview/","page":"Solver overview","title":"Solver overview","text":"The functions a solver (<: AbstractSolver) should implement are presented below. ","category":"page"},{"location":"solvers/solver_overview/","page":"Solver overview","title":"Solver overview","text":"Five.step!\nFive.isdone\nFive.should_abort","category":"page"},{"location":"solvers/solver_overview/#Five.step!","page":"Solver overview","title":"Five.step!","text":"step!(solver::AbstractSolver, state::StateVariables, globaldata::GlobalData)\n\nGiven the current state of a system, the solver advances to the next state (mutating the input argument state). The next state (and step size) is determined by the parameters of the solver.\n\n\n\n\n\n","category":"function"},{"location":"solvers/solver_overview/#Base.isdone","page":"Solver overview","title":"Base.isdone","text":"isdone(itr, state...) -> Union{Bool, Missing}\n\nThis function provides a fast-path hint for iterator completion. This is useful for mutable iterators that want to avoid having elements consumed, if they are not going to be exposed to the user (e.g. to check for done-ness in isempty or zip). Mutable iterators that want to opt into this feature should define an isdone method that returns true/false depending on whether the iterator is done or not. Stateless iterators need not implement this function. If the result is missing, callers may go ahead and compute iterate(x, state...) === nothing to compute a definite answer.\n\n\n\n\n\nisdone(solver::AbstractSolver, state::StateVariables, globaldata::GlobalData)\n\nDetermines if the state has reached the termination criteria of the solver\n\n\n\n\n\n","category":"function"},{"location":"solvers/solver_overview/#Five.should_abort","page":"Solver overview","title":"Five.should_abort","text":"should_abort(solver::AbstractSolver, state::StateVariables, globaldata::GlobalData)\n\nDetermines if the solver should abort simulation (for example if it is not able to converge)\n\n\n\n\n\n","category":"function"},{"location":"parts/#Parts","page":"Parts","title":"Parts","text":"","category":"section"},{"location":"parts/","page":"Parts","title":"Parts","text":"A part is a collection of cells with the same element type and material.","category":"page"},{"location":"parts/#Required-functions","page":"Parts","title":"Required functions","text":"","category":"section"},{"location":"parts/","page":"Parts","title":"Parts","text":"Five.assemble_stiffnessmatrix_and_forcevector!\nFive.assemble_forcevector!\nFive.assemble_dissipation!","category":"page"},{"location":"parts/#Five.assemble_stiffnessmatrix_and_forcevector!","page":"Parts","title":"Five.assemble_stiffnessmatrix_and_forcevector!","text":"assemble_stiffnessmatrix_and_forcevector!(dh::AbstractDofHandler, part::AbstractPart, state::StateVariables)\n\n\n\n\n\n","category":"function"},{"location":"parts/#Five.assemble_forcevector!","page":"Parts","title":"Five.assemble_forcevector!","text":"assemble_forcevector!(dh::AbstractDofHandler, part::AbstractPart, state::StateVariables)\n\n\n\n\n\n","category":"function"},{"location":"parts/#Five.assemble_dissipation!","page":"Parts","title":"Five.assemble_dissipation!","text":"assemble_dissipation!(dh::AbstractDofHandler, part::AbstractPart, state::StateVariables)\n\n\n\n\n\n","category":"function"},{"location":"examples/beam_example/","page":"Beam example","title":"Beam example","text":"EditURL = \"https://github.com/lijas/Five.jl/blob/master/docs/src/literate/beam_example.jl\"","category":"page"},{"location":"examples/beam_example/#Beam-example","page":"Beam example","title":"Beam example","text":"","category":"section"},{"location":"examples/beam_example/","page":"Beam example","title":"Beam example","text":"using Five\n\ndata = ProblemData(\n    dim = 2,\n    tend = 1.0\n)\n\ndata.grid = generate_grid(Quadrilateral, (10,5), Vec((0.0, 0.0)), Vec((10.0, 1.0)))\n\naddvertexset!(data.grid, \"topright\", (x) -> x[1] == 10.0 && x[2] == 1.0)\n\nmaterial = MatLinearElastic(\n    E = 1e5,\n    nu = 0.3\n)\n\n#= material = MatHyperElasticPlastic(\n    elastic_material = MatNeoHook(\n        E = 1.0e5,\n        ν = 0.3\n    ),\n    τ₀ = 400.0,\n    H = 1.0e5/20\n) |> PlaneStrainMaterial =#\n\ncon1 = Dirichlet(\n    set = getfaceset(data.grid, \"left\"),\n    func = (x,t) -> (0.0, 0.0),\n    field = :u,\n    dofs = [1,2]\n)\npush!(data.dirichlet, con1)\n\n#=\ncon1 = Dirichlet(\n    set = getfaceset(data.grid, \"right\"),\n    func = (x,t) -> (t*1.0),\n    field = :u,\n    dofs = [2]\n)\npush!(data.dirichlet, con1)=#\n\npart = Part{2,Float64}(\n    element = SolidElement{2,2,RefCube,Float64}(\n        celltype = Ferrite.Quadrilateral,\n        qr_order = 4\n    ),\n    material = material,\n    cellset = collect(1:getncells(data.grid))\n)\npush!(data.parts, part)\n\ndata.output[] = Output(\n    interval = -0.1,\n    runname = \"Beamexample\",\n    savepath = \".\"\n)\n\noutput = OutputData(\n    type = DofValueOutput(\n        field = :u,\n        dofs = [2]\n    ),\n    interval = 0.1,\n    set = getvertexset(data.grid, \"topright\")\n)\ndata.outputdata[\"reactionforce\"] = output\n\nvtkoutput = VTKCellOutput(\n    type = MaterialStateOutput(\n        field = :ϵᵖ\n    ),\n    func = mean,\n)\nFive.push_vtkoutput!(data.output[], vtkoutput)\n\nvtkoutput = VTKNodeOutput(\n    type = MaterialStateOutput(\n        field = :ϵᵖ\n    ),\n    func = mean,\n)\nFive.push_vtkoutput!(data.output[], vtkoutput)\n\n\nforce = PointForce(\n    field = :u,\n    comps = [2],\n    set = getvertexset(data.grid, \"topright\"),\n    func = (X,t) -> -10.0*t\n)\npush!(data.external_forces, force)\n\nsolver = NewtonSolver(\n    Δt0 = 0.1,\n    Δt_max = 0.1,\n)\n\nstate, data = build_problem(data)\n\noutput = solvethis(solver, state, data)\n\nd = output.outputdata[\"reactionforce\"].data[end].displacement","category":"page"},{"location":"examples/beam_example/","page":"Beam example","title":"Beam example","text":"","category":"page"},{"location":"examples/beam_example/","page":"Beam example","title":"Beam example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"EditURL = \"https://github.com/lijas/Five.jl/blob/master/docs/src/literate/enf_example.jl\"","category":"page"},{"location":"examples/enf_example/#ENF-example","page":"ENF example","title":"ENF example","text":"","category":"section"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"using Five\nusing Ferrite\n\nfunction generate_enf_grid(nelx, nely, L, h, a0, SolidCellType, CohesiveCellType)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"    grid1 = generate_grid(SolidCellType,(nelx,nely),Vec((0.0,0.0)),Vec((L,h)))\n    grid2 = generate_grid(SolidCellType,(nelx,nely),Vec((0.0,h)),Vec((L,h*2)))\n    grid = gridmerge(grid1,grid2)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"    addvertexset!(grid, \"mid\", (x)-> x[1] ≈ L/2 && x[2] ≈ h*2)\n    @assert(length(getvertexset(grid, \"mid\")) == 2)\n    addvertexset!(grid, \"botleft\", (x)-> x[1] ≈ 0.0 && x[2] ≈ 0.0)\n    addvertexset!(grid, \"botright\", (x)-> x[1] ≈ L && x[2] ≈ 0.0)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"    construct_interfacer_cells!(grid, \"top1\", \"bottom2\", CohesiveCellType)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"    solid_cells = collect(1:nelx*nely*2)\n    cz_cells = collect((1:nelx) .+ 2*nelx*nely)\n\n    addcellset!(grid, \"solid_cells\", solid_cells)\n    addcellset!(grid, \"cz_cells\", cz_cells)\n\n    addcellset!(grid, \"temp_precraced\", (x)-> x[1]>L-a0)\n    precracked_cells = setdiff(getcellset(grid, \"temp_precraced\"), solid_cells)\n\n    addcellset!(grid, \"precracked\", precracked_cells)\n\n    return grid\nend\n\nfunction construct_interfacer_cells!(grid, setname1::String, setname2::String, CohesiveCellType)\n\n\n    grid2_bottom_faceset = collect(getfaceset(grid, setname2))\n    grid1_top_faceset = collect(getfaceset(grid, setname1))\n    function sortby(f1)\n        n1,n2 = Ferrite.faces(grid.cells[f1[1]])[f1[2]]\n        return min(n1,n2)\n    end\n    function myless(f1,f2)\n        n1,n2 = Ferrite.faces(grid.cells[f1[1]])[f1[2]]\n        minA = min(grid.nodes[n1].x,grid.nodes[n1].x)\n\n        n1,n2 = Ferrite.faces(grid.cells[f2[1]])[f2[2]]\n        minB = min(grid.nodes[n1].x,grid.nodes[n1].x)\n        return minA<minB\n    end\n\n    grid1_top_faceset = sort(grid1_top_faceset, lt = myless)\n    grid2_bottom_faceset = sort(grid2_bottom_faceset, lt = myless)\n\n\n    ncells = getncells(grid)\n    for (i,topface_index) in enumerate(grid1_top_faceset)\n        botface_index = grid2_bottom_faceset[i]\n\n        topcell = grid.cells[topface_index[1]]\n        botcell = grid.cells[botface_index[1]]\n        #topface = Ferrite.faces(grid.cells[topface_index[1]])[topface_index[2]]\n        #botface = Ferrite.faces(grid.cells[botface_index[1]])[botface_index[2]]\n        cz_nodes = Int[]\n        for j in [4, 3]\n            push!(cz_nodes, topcell.nodes[j])\n        end\n        for j in [1, 2]\n            push!(cz_nodes, botcell.nodes[j])\n        end\n\n        if CohesiveCellType === CohesiveCell{2,6,2}\n            push!(cz_nodes, topcell.nodes[7])\n        end\n        if CohesiveCellType === CohesiveCell{2,6,2}\n            push!(cz_nodes, botcell.nodes[5])\n        end\n\n        #cell_nodes = [topface[2], topface[1], botface[1], botface[2]]\n        new_cell = CohesiveCellType(Tuple(cz_nodes))\n        push!(grid.cells, new_cell)\n    end\n\nend\n\n#Crack length\na0 = 16.9\n\n#Celltype\nCohesiveCellType = CohesiveCell{2,4,2}\nSolidCellType = Ferrite.Quadrilateral\n\n#Dimension\nDIM = 2\nNELX = 176\nNELY = 1\n\nORDERS = (2,2)\n\nL = 120.0\nh = 2.0\nb = 20.0\n\ndata = ProblemData(\n    dim = DIM,\n    tend = 1.0,\n)\n\n#grid\ndata.grid = generate_enf_grid(NELX, NELY, L, h, a0, SolidCellType, CohesiveCellType)\n\ninterfacematerial =\nMatCZBilinear(\n    K    = 1.0e5,\n    Gᴵ   = (0.5, 0.5, 0.5),\n    τᴹᵃˣ = (50.0, 50.0, 50.0),\n    η    = 1.0\n)\n\nmaterial =\nMatTransvLinearElastic(\n    E1 = 126.0e3,\n    E2 = 10.0e3,\n    ν_12 = 0.29,\n    G_12 = 8.0e3,\n    α = 0.0\n)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"part = Part{2,Float64}(\n    element  = SolidElement{2,1,RefCube,Float64}(\n        thickness = b,\n        qr_order = 2,\n        celltype = SolidCellType,\n        dimstate = PlaneStrain()\n    ),\n    material = material,\n    cellset  = getcellset(data.grid, \"solid_cells\") |> collect |> sort\n)\npush!(data.parts, part)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"part = Part{2,Float64}(\n    element = CohesiveElement(\n        order = 1,\n        thickness = b,\n        nqp = 2,\n        celltype = CohesiveCellType\n    ),\n    material = interfacematerial,\n    cellset = getcellset(data.grid, \"cz_cells\") |> collect |> sort\n)\npush!(data.parts, part)\n\n#Change initial states\nfor cellid in getcellset(data.grid, \"precracked\")\n    nqp = 2 #Hardcoded\n    data.materialstates[cellid] = [Five.initial_material_state(interfacematerial, 1.0) for i in 1:nqp]\nend","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"dbc1 = Ferrite.Dirichlet(\n    field = :u,\n    set = getvertexset(data.grid, \"botleft\"),\n    func = (x,t)->[0.0, 0.0],\n    dofs =  [1,2]\n)\npush!(data.dirichlet, dbc1)\n\ndbc1 = Ferrite.Dirichlet(\n    field = :u,\n    set    = getvertexset(data.grid, \"botright\"),\n    func   = (x,t)->[0.0],\n    dofs  = [2]\n)\npush!(data.dirichlet, dbc1)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"force = PointForce(\n    field = :u,\n    comps = [2],\n    set = [first(getvertexset(data.grid, \"mid\"))],\n    func = (X,t) -> -1.0\n)\npush!(data.external_forces, force)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"data.output[] = Output(\n    interval = 0.0,\n    runname = \"enf_a0$(floor(Int,a0))_locdis_\",\n    savepath = \".\"\n)","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"output = OutputData(\n    type = DofValueOutput(\n        field = :u,\n        dofs = 1:2\n    ),\n    interval = 0.0,\n    set = Set([first(getvertexset(data.grid, \"mid\"))])\n)\ndata.outputdata[\"reactionforce\"] = output\n\nvtkoutput = VTKCellOutput(\n    type = MaterialStateOutput(\n        field = :d\n    ),\n    func = mean,\n)\nFive.push_vtkoutput!(data.output[], vtkoutput)\n\nstate, globaldata = build_problem(data)\n\nsolver = LocalDissipationSolver(\n    Δλ0          = 5.0,\n    Δλ_max       = 10.0,\n    Δλ_min       = 1e-7,\n    ΔL0          = 2.5,\n    ΔL_min       = 1e-2,\n    ΔL_max       = 5.0,\n    sw2d         = 0.2,\n    sw2i         = 1e-7,\n    optitr       = 8,\n    maxitr       = 13,\n    maxitr_first_step = 50,\n    maxsteps     = 200,\n    λ_max        = 1200.0,\n    λ_min        = -100.0,\n    tol          = 1e-5,\n    max_residual = 1e5\n)\n\noutput = solvethis(solver, state, globaldata)\n\nd = [output.outputdata[\"reactionforce\"].data[i].displacement for i in 1:length(output.outputdata[\"reactionforce\"].data)]\nf = [output.outputdata[\"reactionforce\"].data[i].fint for i in 1:length(output.outputdata[\"reactionforce\"].data)]","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"","category":"page"},{"location":"examples/enf_example/","page":"ENF example","title":"ENF example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"elements/solid_element/#Solid-element","page":"Solid element","title":"Solid element","text":"","category":"section"},{"location":"elements/solid_element/","page":"Solid element","title":"Solid element","text":"Large strain formulation in total Lagrangian form.  Second Piola Kirchhoff Stress tensor and Green-Lagrange Strain. ","category":"page"},{"location":"elements/elements_overview/#Elements-overview","page":"Elements overview","title":"Elements overview","text":"","category":"section"},{"location":"elements/elements_overview/","page":"Elements overview","title":"Elements overview","text":"Element API","category":"page"},{"location":"elements/elements_overview/","page":"Elements overview","title":"Elements overview","text":"Five.get_fields\nFive.integrate_forcevector!\nFive.integrate_forcevector_and_stiffnessmatrix!\nFive.integrate_massmatrix!","category":"page"},{"location":"elements/elements_overview/#Five.get_fields","page":"Elements overview","title":"Five.get_fields","text":"get_field(::AbstractPart)\n\nShould return the fields of the part.\n\nExample:      Solid-element: Field(:u, Lagrange{2,RefCube,1}, 2)     Shell-element: Field(:u, Lagrange{2,RefCube,1}, 3), Field(:θ, Lagrange{2,RefCube,1}, 3)\n\n\n\n\n\n","category":"function"},{"location":"elements/elements_overview/#Five.integrate_forcevector!","page":"Elements overview","title":"Five.integrate_forcevector!","text":"Return the internal forcevector of element\n\n\n\n\n\n","category":"function"},{"location":"elements/elements_overview/#Five.integrate_forcevector_and_stiffnessmatrix!","page":"Elements overview","title":"Five.integrate_forcevector_and_stiffnessmatrix!","text":"Return the internal forcevector and the element stiffness matrix of element\n\n\n\n\n\n","category":"function"},{"location":"elements/elements_overview/#Five.integrate_massmatrix!","page":"Elements overview","title":"Five.integrate_massmatrix!","text":"Return the mass matrix of the element\n\n\n\n\n\n","category":"function"},{"location":"examples/bar_example/","page":"Bar example","title":"Bar example","text":"EditURL = \"https://github.com/lijas/Five.jl/blob/master/docs/src/literate/bar_example.jl\"","category":"page"},{"location":"examples/bar_example/#Bar-example","page":"Bar example","title":"Bar example","text":"","category":"section"},{"location":"examples/bar_example/","page":"Bar example","title":"Bar example","text":"using Five\n\nconst α = pi/3;\nconst Δ = 200.0\nconst P = -30\n\ndata = ProblemData(\n    dim = 2,\n    tend = 1.0\n)\n\nfunction generate_bars()\n    L = 0.5Δ/cos(α)\n    nodecoords = [Vec(0.0,0.0), Vec(0.5Δ, 0.5Δ/tan(α)), Vec(Δ,0.0), Vec(0.5Δ, 0.5Δ/tan(α) + L)]\n\n    nodes = [Node{2,Float64}(x) for x in nodecoords]\n    cells = [Line2D((1,2)), Line2D((2,3)), Line2D((2,4))]\n    grid = Grid(cells,nodes)\n\n    addvertexset!(grid, \"left\", (x)-> x[1] ≈ 0.0)\n    addvertexset!(grid, \"right\", (x)-> x[1] ≈ Δ)\n    addvertexset!(grid, \"topmid\", (x)-> x[1] ≈ Δ/2 && x[2] ≈ 0.5Δ/tan(α)+L)\n    addvertexset!(grid, \"midmid\", (x)-> x[1] ≈ Δ/2)# && x[2] ≈ 0.5Δ/tan(α)+L)\nend\n\ndata.grid = generate_bars()\n\nmaterial1 = MatLinearElastic(\n    E = 210.0,\n    nu = 0.3\n)\n\nbar1 = Part{2,Float64}(\n    material = material1,\n    cellset = [1, 2],\n    element = BarElement{2}(\n        area = 1.0,\n    )\n)\npush!(data.parts, bar1)\n\nmidbar = Part{2,Float64}(\n    material = material1,\n    cellset = [3],\n    element = BarElement{2}(\n        area = 1.0/2,\n    )\n)\npush!(data.parts, midbar)\n\ncon = Dirichlet(\n    set = getvertexset(data.grid, \"left\"),\n    func = (x,t) -> (0.0, 0.0),\n    field = :u,\n    dofs = [1,2]\n)\npush!(data.dirichlet, con)\n\ncon = Dirichlet(\n    set =  getvertexset(data.grid, \"right\") ,\n    func = (x,t) -> (0.0, 0.0),\n    field = :u,\n    dofs = [1,2]\n)\npush!(data.dirichlet, con)\n\ncon3 = Dirichlet(\n    set =  Set([first(getvertexset(data.grid, \"midmid\"))]),\n    func = (x,t) -> (0.0),\n    field = :u,\n    dofs = [1,]\n)\npush!(data.dirichlet, con3)\n\ncon3 = Dirichlet(\n    set =  Set([first(getvertexset(data.grid, \"topmid\"))]),\n    func = (x,t) -> (0.0),\n    field = :u,\n    dofs = [1,]\n)\npush!(data.dirichlet, con3)\n\n\ndata.output[] = Output(\n    runname = \"barexample\",\n    savepath = \".\",\n    interval = 0.0,\n)\n\noutput = OutputData(\n    type = DofValueOutput(\n        field = :u,\n        dofs = [2,]\n    ),\n    interval = 0.00,\n    set = getvertexset(data.grid, \"topmid\")\n)\ndata.outputdata[\"reactionforce\"] = output\n\n#=output = VTKPointData(\n    type = MaterialOutput(\n        field = :σ,\n    ),\n    part = bars\n)=#\n\nforce = PointForce(\n    field = :u,\n    comps = [2,],\n    set = getvertexset(data.grid, \"topmid\"),\n    func = (X,t) -> 1.0\n)\npush!(data.external_forces, force)\n\nsolver = ArcLengthSolver(\n    Δλ0 = -1.0,\n\n    λ_max = 40.0,\n    λ_min = -40.0,\n\n    ΔL_max = 5.0,\n    ΔL_min = 0.01,\n\n    tol = 1e-4,\n    maxsteps = 30,\n    optitr = 10,\n    maxitr = 20\n)\n\nstate, data = build_problem(data)\n\nresult = solvethis(solver, state, data)\n\nu = getproperty.(result.outputdata[\"reactionforce\"].data, :displacement)\nf = getproperty.(result.outputdata[\"reactionforce\"].data, :fint)\n\nusing Test\n@test last(u) ≈ 82.26348529886634\n@test last(f) ≈ 9.3196516507723","category":"page"},{"location":"examples/bar_example/","page":"Bar example","title":"Bar example","text":"plot(u,f, mark=:o)","category":"page"},{"location":"examples/bar_example/","page":"Bar example","title":"Bar example","text":"","category":"page"},{"location":"examples/bar_example/","page":"Bar example","title":"Bar example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"essentials/#Essentials","page":"Essentials","title":"Essentials","text":"","category":"section"},{"location":"essentials/","page":"Essentials","title":"Essentials","text":"StateVariables\nSystemArrays\nGlobalData","category":"page"},{"location":"essentials/#Five.StateVariables","page":"Essentials","title":"Five.StateVariables","text":"StateVariables(T::Type, ndofs::Int)\n\nContains all information about the state of system (displacements, material damage etc).\n\nField variables:\n\nd: displacements \nv: velocityes\na: accelerations \nt: current time\nλ: current loading factor (fᵉ = λ*f̂, used in arc-length solver) \nL: Current step length (used in arc-length solvers)\nΔd, Δv, Δa, Δt, Δλ, ΔL - Difference between current and previous timestep of variables above\nsystem_arrays: Instance of SystemArrays\npartstates: Contains PartState, one for each cell\nprev_partstates: Contains PartState from previous timesteps, one for each cell\nstep: Number of steps taken up until this point\n\nPossible changes Remove all Δ-variables, and require two states instead, (previous and current) \n\n\n\n\n\n","category":"type"},{"location":"essentials/#Five.SystemArrays","page":"Essentials","title":"Five.SystemArrays","text":"SystemArrays(T::Type, ndofs::Int)\n\nContains global arrays, such as internal force vector and stiffness matrix.\n\n\n\n\n\n","category":"type"},{"location":"essentials/#Five.GlobalData","page":"Essentials","title":"Five.GlobalData","text":"GlobalData{dim,T,DH<:AbstractDofHandler}\n\nContains all information about the problem being solved, e.g Forces, Boundary conditions, Parts\n\n\n\n\n\n","category":"type"},{"location":"solvers/crisfield_solver/#Crisfield-arc-length-solver","page":"Crisfield arc-length solver","title":"Crisfield arc-length solver","text":"","category":"section"},{"location":"solvers/crisfield_solver/","page":"Crisfield arc-length solver","title":"Crisfield arc-length solver","text":"This solver is based on the paper from 1981 by Crisfield (A fast incremental ...)","category":"page"},{"location":"solvers/crisfield_solver/","page":"Crisfield arc-length solver","title":"Crisfield arc-length solver","text":"The arc-length constraint is defined as","category":"page"},{"location":"solvers/crisfield_solver/","page":"Crisfield arc-length solver","title":"Crisfield arc-length solver","text":"    varphi(boldsymbol a lambda) = Delta boldsymbol a Delta boldsymbol a^T + Deltalambda^2 - Delta L^2 = 0","category":"page"},{"location":"solvers/crisfield_solver/","page":"Crisfield arc-length solver","title":"Crisfield arc-length solver","text":"where Delta L is a user-defined parameter limiting the step size.","category":"page"},{"location":"solvers/crisfield_solver/","page":"Crisfield arc-length solver","title":"Crisfield arc-length solver","text":"Five.ArcLengthSolver","category":"page"},{"location":"solvers/crisfield_solver/#Five.ArcLengthSolver","page":"Crisfield arc-length solver","title":"Five.ArcLengthSolver","text":"ArcLengthSolver{T}\n\nArguments:     - Δλ0: Initial size of load parameter     - λ_max:      - λ_min:      - ψ:      - maxsteps: Maximum number of steps     - max_residual: Maximum value of the residual before aborting a step     - optitr:      - maxitr:      - maxitr_first_step:      - finish_criterion: Function \n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using Five)","category":"page"},{"location":"#Five.jl","page":"Home","title":"Five.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Five.jl","category":"page"}]
}
