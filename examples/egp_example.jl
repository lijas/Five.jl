using Five

tmax = 1000.0
tsim = 1000.0
data = ProblemData(
    dim = 3,
    tend = tsim
)

data.grid = generate_grid(Hexahedron, (1,1,1), Vec((0.0, 0.0, 0.0)), Vec((1.0, 1.0, 1.0)))

addvertexset!(data.grid, "x100", (x) -> x[1] == 1.0 && x[2] == 0.0 && x[3] == 0.0)
addvertexset!(data.grid, "x000", (x) -> x[1] == 0.0 && x[2] == 0.0 && x[3] == 0.0)
addvertexset!(data.grid, "x111", (x) -> x[1] == 1.0 && x[2] == 1.0 && x[3] == 1.0)

material = 
MatEGP(
    E = 1.0e6,
    ν = 0.25,
    
    ACTION = 1,
    NOP = 1,
    NAM = 1,
    NBM = 0,
    NGM = 0,
    NGENS = 6,
    PRESMET = 1,
    HARDMET = 1,
    VISCHARD = 0,
    STIFFNESS = 0,
    VISCDEF = 0,

    STANDPROP = [NaN, 273, 273, 26.0, 0.0E0, 0.0E0, 3750, 1.0],

    PROPS_PROC1_STD = [2.89e5, 0.0, 0.0 , 0.0 , 26.5, 0.964, 50.0, -5.0, 5.38452923e-27, 0.08],
    PROPS_PROC1_G = [321.0],
    PROPS_PROC1_GH0R = [2.1e11]
) 

material = 
MatHyperElasticPlastic(
    elastic_material = MatNeoHook(
        E = 1.0e3,
        ν = 0.25
    ),
    τ₀ = 65.0,
    H = 1.0e3/100
)

#=material = MatLinearElastic(
    E = 1e4,
    nu = 0.35
) =#

con1 = Dirichlet(
    set = getfaceset(data.grid, "front"),
    func = (x,t) -> (0.0),
    field = :u,
    dofs = [2]
)
push!(data.dirichlet, con1)

con1 = Dirichlet(
    set = getvertexset(data.grid, "x000"),
    func = (x,t) -> (0.0,0.0),
    field = :u,
    dofs = [1,3]
)
push!(data.dirichlet, con1)

con1 = Dirichlet(
    set = getvertexset(data.grid, "x100"),
    func = (x,t) -> (0.0),
    field = :u,
    dofs = [3]
)
push!(data.dirichlet, con1)

loadf(t) = begin
    if t < tmax/2
        return (-t/tmax) * -0.8
    else
        return -0.5 * -0.8#(t-tmax)/tmax * -0.8
    end
end

con1 = Dirichlet(
    set = getfaceset(data.grid, "back"),
    func = (x,t) -> exp(-0.001*t)-1.0,
    field = :u,
    dofs = [2]
)
push!(data.dirichlet, con1)

part = Part{3,Float64}(
    element = SolidElement{3,1,RefCube,Float64}(
        celltype = Ferrite.Hexahedron,
        qr_order = 2,
        total_lagrangian = true
    ),
    material = material,
    cellset = collect(1:getncells(data.grid))
)
push!(data.parts, part)

data.output[] = Output(
    interval = tmax/10,
    runname = "zegptest",
    savepath = "."
)

vtkoutput = VTKCellOutput(
    type = MaterialStateOutput(
        field = :εᵖ
    ),
    func = (x)-> mean(x),
)
Five.push_vtkoutput!(data.output[], vtkoutput)

vtkoutput = VTKCellOutput(
    type = MaterialStateOutput(
        field = :σ
    ),
    func = (x)-> mean(x),
)
Five.push_vtkoutput!(data.output[], vtkoutput)

output = OutputData(
    type = DofValueOutput(
        field = :u,
        dofs = [2]
    ),
    interval = 1.0,
    set = getvertexset(data.grid, "x111")
)
data.outputdata["reactionforce"] = output

solver = NewtonSolver(
    Δt0 = 10.0,
    Δt_min = 0.01,
    Δt_max = 10.0,
    tol = 1e-4,
    maxitr = 20,
    optitr = 15
)

state, data = build_problem(data)

output = solvethis(solver, state, data)
  
d = [output.outputdata["reactionforce"].data[i].displacement for i in 1:length(output.outputdata["reactionforce"].data)]
f = [output.outputdata["reactionforce"].data[i].fint for i in 1:length(output.outputdata["reactionforce"].data)]

degp = [0.0, 0.009950166250831893, 0.019801326693244747, 0.029554466451491845, 0.03921056084767682, 0.048770575499285984, 0.05823546641575128, 0.06760618009405173, 0.07688365361336424, 0.08606881472877181, 0.09516258196404048, 0.10416586470347178, 0.11307956328284252, 0.1219045690794387, 0.13064176460119414, 0.1392920235749422, 0.14785621103378865, 0.1563351834036163, 0.164729788588728, 0.1730408660566377, 0.18126924692201818, 0.18941575402981292, 0.1974812020375215, 0.20546639749666595, 0.21337213893344653, 0.22119921692859512, 0.22894841419643375, 0.23662050566314685, 0.24421625854427453, 0.25173643242143473, 0.2591817793182821, 0.26655304377571076, 0.27385096292630906, 0.28107626656807383, 0.28822967723739035, 0.29531191028128656, 0.302323673928969, 0.3092656693626453, 0.31613859078764417, 0.32294312550183535, 0.3296799539643607, 0.3363497498636806, 0.34295318018494325, 0.3494909052766835, 0.3559635789168586, 0.36237184837822667, 0.36871635449307405, 0.3749977317172992, 0.38121660819385916, 0.3873736058155839, 0.3934693402873666, 0.3995044211877341, 0.4054794520298056, 0.4113950303216448, 0.41725174762601036, 0.42305018961951335, 0.42879093615118513, 0.4344745613004629, 0.44010163343459796, 0.4456727152654929, 0.4511883639059735, 0.4566491309255002, 0.4620555624053255, 0.4674081989931028, 0.47270757595695145, 0.47795422323898396, 0.4831486655083008, 0.48829142221345756, 0.49338300763441045, 0.49842393093394455, 0.5034146962085906, 0.5083558025390349, 0.5132477440400283, 0.5180910099097975, 0.5228860844789656, 0.5276334472589853, 0.5323335729900908, 0.5369869316887719, 0.5415939886947765, 0.5461552047176441, 0.5506710358827784, 0.5551419337770589, 0.5595683454940008, 0.5639507136784645, 0.5682894765709203, 0.5725850680512733, 0.5768379176822511, 0.581048450752361, 0.5852170883184187, 0.5893442472476544, 0.5934303402594009, 0.597475775966364, 0.6014809589154859, 0.605446289628399, 0.6093721646414789, 0.6132589765454988, 0.6171071140248879, 0.6209169618966012, 0.6246889011486004, 0.6284233089779543, 0.6321205588285577]
fegp = [0.0, -2.5358034024880642, -5.094476707574593, -7.676714586626412, -10.283260333147393, -12.914856230444489, -15.569703342763258, -17.348422928709276, -17.542278308587044, -17.429898228237775, -17.034807684227797, -16.505775635116365, -16.016098407952697, -15.627037162468024, -15.338341116909222, -15.135831353632021, -15.005490415698922, -14.935864969689423, -14.917906857879874, -14.94447735221987, -15.009756653802341, -15.109131117284498, -15.238769332866676, -15.395489136083299, -15.576623963396209, -15.779921982318601, -16.003469157834733, -16.24562970738249, -16.504999386211466, -16.780368383494398, -17.070691518855668, -17.375064056152972, -17.692701890934202, -18.022925180641682, -18.3651447122937, -18.71885046731336, -19.083601965298065, -19.45902005989697, -19.84477992908306, -20.240605054931063, -20.646262028656743, -21.061556048326754, -21.486327001454473, -21.92044604417487, -22.36381700610212, -22.81635578368372, -23.278015505715352, -23.748765889679166, -24.22859604532084, -24.71751293310302, -25.215539938028, -25.722715601737733, -26.239092493992793, -26.76473620777934, -27.29972446393902, -27.844146313127712, -28.398101424584787, -28.961699452390288, -29.535059471124484, -30.118309473757016, -30.711585925473585, -31.315033367851004, -31.928804068459193, -32.553057711478004, -33.187961125423755, -33.83368804452783, -34.49041890061695, -35.1583406427334, -35.837646582008205, -36.52853625953451, -37.231215335250745, -37.9458954960157, -38.672794381264154, -39.41213552478301, -40.16414831128612, -40.929067946624734, -41.70713544053097, -42.49859760097088, -43.30370703921649, -44.12272218486517, -44.95590731009822, -45.80353256254664, -46.66587400618693, -47.543213669761904, -48.435839602251924, -49.34404593499579, -50.26813295006272, -51.208407154570686, -52.16518136061676, -53.138774770590224, -54.129513067593436, -55.1377285107816, -56.16376003540503, -57.20795335743171, -58.27066108255971, -59.35224281950633, -60.45306529746472, -61.57350248764861, -62.7139357287749, -63.87475385653222, -65.05635333684221]

using Plots; plotly()
fig = plot(abs.(d),abs.(f), mark=:o, label="julia UpdateLag")
plot!(fig, abs.(degp),abs.(fegp))
#plot!(fig, abs.(dtl),abs.(ftl) , mark=:cross, xlim = [0.0, 1.0], ylim = [0.0,100.0], label="julia TotalLag")
#plot!(fig, abs.(res[:,1]), abs.(res[:,2]) , mark=:square, label = "pyfem")
